//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iRLeagueManager.UserDBServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/UserDBService")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfileTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfileText {
            get {
                return this.ProfileTextField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfileTextField, value) != true)) {
                    this.ProfileTextField = value;
                    this.RaisePropertyChanged("ProfileText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserDBServiceRef.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserLogin", ReplyAction="http://tempuri.org/IUserService/UserLoginResponse")]
        iRLeagueManager.UserDBServiceRef.UserDTO UserLogin(string userName, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserLogin", ReplyAction="http://tempuri.org/IUserService/UserLoginResponse")]
        System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> UserLoginAsync(string userName, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserSetPw", ReplyAction="http://tempuri.org/IUserService/UserSetPwResponse")]
        bool UserSetPw(int userId, string oldPw, string newPw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserSetPw", ReplyAction="http://tempuri.org/IUserService/UserSetPwResponse")]
        System.Threading.Tasks.Task<bool> UserSetPwAsync(int userId, string oldPw, string newPw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsUserNameAvailable", ReplyAction="http://tempuri.org/IUserService/IsUserNameAvailableResponse")]
        bool IsUserNameAvailable(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsUserNameAvailable", ReplyAction="http://tempuri.org/IUserService/IsUserNameAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsUserNameAvailableAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        iRLeagueManager.UserDBServiceRef.UserDTO CreateUser(string userName, string initialPw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> CreateUserAsync(string userName, string initialPw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/PutUserData", ReplyAction="http://tempuri.org/IUserService/PutUserDataResponse")]
        iRLeagueManager.UserDBServiceRef.UserDTO PutUserData(iRLeagueManager.UserDBServiceRef.UserDTO user, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/PutUserData", ReplyAction="http://tempuri.org/IUserService/PutUserDataResponse")]
        System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> PutUserDataAsync(iRLeagueManager.UserDBServiceRef.UserDTO user, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserData", ReplyAction="http://tempuri.org/IUserService/GetUserDataResponse")]
        iRLeagueManager.UserDBServiceRef.UserDTO GetUserData(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserData", ReplyAction="http://tempuri.org/IUserService/GetUserDataResponse")]
        System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> GetUserDataAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserList", ReplyAction="http://tempuri.org/IUserService/GetUserListResponse")]
        iRLeagueManager.UserDBServiceRef.UserDTO[] GetUserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserList", ReplyAction="http://tempuri.org/IUserService/GetUserListResponse")]
        System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO[]> GetUserListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : iRLeagueManager.UserDBServiceRef.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<iRLeagueManager.UserDBServiceRef.IUserService>, iRLeagueManager.UserDBServiceRef.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public iRLeagueManager.UserDBServiceRef.UserDTO UserLogin(string userName, string pw) {
            return base.Channel.UserLogin(userName, pw);
        }
        
        public System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> UserLoginAsync(string userName, string pw) {
            return base.Channel.UserLoginAsync(userName, pw);
        }
        
        public bool UserSetPw(int userId, string oldPw, string newPw) {
            return base.Channel.UserSetPw(userId, oldPw, newPw);
        }
        
        public System.Threading.Tasks.Task<bool> UserSetPwAsync(int userId, string oldPw, string newPw) {
            return base.Channel.UserSetPwAsync(userId, oldPw, newPw);
        }
        
        public bool IsUserNameAvailable(string username) {
            return base.Channel.IsUserNameAvailable(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserNameAvailableAsync(string username) {
            return base.Channel.IsUserNameAvailableAsync(username);
        }
        
        public iRLeagueManager.UserDBServiceRef.UserDTO CreateUser(string userName, string initialPw) {
            return base.Channel.CreateUser(userName, initialPw);
        }
        
        public System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> CreateUserAsync(string userName, string initialPw) {
            return base.Channel.CreateUserAsync(userName, initialPw);
        }
        
        public iRLeagueManager.UserDBServiceRef.UserDTO PutUserData(iRLeagueManager.UserDBServiceRef.UserDTO user, string pw) {
            return base.Channel.PutUserData(user, pw);
        }
        
        public System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> PutUserDataAsync(iRLeagueManager.UserDBServiceRef.UserDTO user, string pw) {
            return base.Channel.PutUserDataAsync(user, pw);
        }
        
        public iRLeagueManager.UserDBServiceRef.UserDTO GetUserData(int userId) {
            return base.Channel.GetUserData(userId);
        }
        
        public System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO> GetUserDataAsync(int userId) {
            return base.Channel.GetUserDataAsync(userId);
        }
        
        public iRLeagueManager.UserDBServiceRef.UserDTO[] GetUserList() {
            return base.Channel.GetUserList();
        }
        
        public System.Threading.Tasks.Task<iRLeagueManager.UserDBServiceRef.UserDTO[]> GetUserListAsync() {
            return base.Channel.GetUserListAsync();
        }
    }
}
