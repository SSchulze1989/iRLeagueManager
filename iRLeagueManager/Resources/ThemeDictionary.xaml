<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:iRLeagueManager.Controls"
                    xmlns:fa="http://schemas.fontawesome.io/icons/" 
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- Global Font Style-->
    <FontFamily x:Key="Global.FontFamily">Bahnschrift</FontFamily>
    <sys:Double x:Key="Global.FontSizeLarge">22</sys:Double>
    <sys:Double x:Key="Global.FontSizeMedium">18</sys:Double>
    <sys:Double x:Key="Global.FontSizeSmall">16</sys:Double>

    <!-- Override System Values-->
    <SolidColorBrush x:Key="{x:Static SystemColors.WindowColorKey}" Color="Red"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#CCCCFF"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>

    <!-- MainWindow-->
    <SolidColorBrush x:Key="iRLM.MainWindow.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="iRLM.MainWindow.BorderColor" Color="Black"/>
    <SolidColorBrush x:Key="iRLM.MainWindow.StatusBarColor" Color="#FF0C0C46"/>

    <!--Base colors and brushes for MainWindow-->
    <SolidColorBrush x:Key="iRLM.Common.Background" Color="White"/>
    <SolidColorBrush x:Key="iRLM.Menu.Background" Color="Black"/>
    <SolidColorBrush x:Key="iRLM.StatusBar.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="iRLM.Header.Background" Color="Black"/>

    <SolidColorBrush x:Key="iRLM.Common.Foreground" Color="Black"/>
    <SolidColorBrush x:Key="iRLM.Menu.Foreground" Color="White"/>
    <SolidColorBrush x:Key="iRLM.StatusBar.Foreground" Color="Black"/>
    <SolidColorBrush x:Key="iRLM.Header.Foreground" Color="White"/>

    <SolidColorBrush x:Key="iRLM.Common.BorderColor" Color="DarkGray"/>
    <SolidColorBrush x:Key="iRLM.Menu.BorderColor" Color="DarkGray"/>
    <SolidColorBrush x:Key="iRLM.StatusBar.BorderColor" Color="DarkGray"/>
    <SolidColorBrush x:Key="iRLM.Header.BorderColor" Color="DarkGray"/>

    <SolidColorBrush x:Key="iRLM.Common.HiglightBrush" Color="#FF805151"/>
    <SolidColorBrush x:Key="iRLM.Common.MouseOverBrush" Color="#BB252525"/>

    <SolidColorBrush x:Key="iRLM.Button.BackgroundBrush" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="iRLM.Button.ForegroundBrush" Color="{x:Static SystemColors.ControlTextColor}"/>
    <SolidColorBrush x:Key="iRLM.Button.BorderBrush" Color="#FF506389"/>
    <Thickness x:Key="iRLM.Button.BorderThickness">1.5</Thickness>
    <SolidColorBrush x:Key="iRLM.Button.HighlightBackgroundBrush" Color="#D0E9F9"/>
    <SolidColorBrush x:Key="iRLM.Button.HighlightForegroundBrush" Color="{x:Static SystemColors.ControlTextColor}"/>
    <SolidColorBrush x:Key="iRLM.Button.HighlightBorderBrush" Color="#FF506389"/>
    <Thickness x:Key="iRLM.Button.HiglightBorderThickness">1.5</Thickness>
    <SolidColorBrush x:Key="iRLM.Button.PressedBackgroundBrush" Color="#FF50A9B9"/>
    <SolidColorBrush x:Key="iRLM.Button.PressedForegroundBrush" Color="#FFFCFCFC"/>
    <SolidColorBrush x:Key="iRLM.Button.PressedBorderBrush" Color="#FF558950"/>
    <Thickness x:Key="iRLM.Button.PressedBorderThickness">1.5</Thickness>
    <SolidColorBrush x:Key="iRLM.Button.CheckedBackgroundBrush" Color="LightCyan"/>
    <SolidColorBrush x:Key="iRLM.Button.CheckedForegroundBrush" Color="Black"/>
    <SolidColorBrush x:Key="iRLM.Button.CheckedBorderBrush" Color="Beige"/>
    <Thickness x:Key="iRLM.Button.CheckedBorderThickness">1,1,1,1</Thickness>
    <SolidColorBrush x:Key="iRLM.Button.DisabledBackgroundBrush" Color="#FFB5B5B5"/>
    <SolidColorBrush x:Key="iRLM.Button.DisabledForegroundBrush" Color="#FF909090"/>
    <SolidColorBrush x:Key="iRLM.Button.DisabledBorderBrush" Color="#FF506389"/>
    <Thickness x:Key="iRLM.Button.DisabledBorderThickness">1,1,1,1</Thickness>

    <!-- Default Controls -->
    <controls:IconButton x:Key="RefreshButton" Content="Refresh" TextElement.FontSize="{StaticResource Global.FontSizeLarge}"
                         VerticalContentAlignment="Center" Padding="0" IconMargin="0,-2,0,0" SeparatorMargin="3"
                         IconFill="DarkGoldenrod">
        <controls:IconButton.IconContent>
            <fa:ImageAwesome Icon="Refresh" Width="18"/>
        </controls:IconButton.IconContent>
    </controls:IconButton>
    
    <!-- Set default Styles-->

    <ControlTemplate x:Key="ButtonDefaultTemplate" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="Background" Value="{StaticResource iRLM.Button.BackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource iRLM.Button.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource iRLM.Button.ForegroundBrush}"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource iRLM.Button.BorderThickness}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource iRLM.Button.HighlightBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource iRLM.Button.HighlightForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource iRLM.Button.PressedBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource iRLM.Button.PressedBorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource iRLM.Button.PressedForegroundBrush}"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource iRLM.Button.PressedBorderThickness}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource iRLM.Button.CheckedBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource iRLM.Button.CheckedBorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource iRLM.Button.CheckedForegroundBrush}"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource iRLM.Button.CheckedBorderThickness}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource iRLM.Button.DisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource iRLM.Button.DisabledBorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource iRLM.Button.DisabledForegroundBrush}"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{StaticResource iRLM.Button.DisabledBorderThickness}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="IconButtonTemplate" TargetType="{x:Type controls:IconButton}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="2">
            <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Orientation="{TemplateBinding StackOrientation}" FlowDirection="{TemplateBinding StackFlowDirection}">
                <ContentControl x:Name="iconContentControl" Content="{TemplateBinding IconContent}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Margin="{TemplateBinding IconMargin}" Foreground="{TemplateBinding IconFill}">
                    <!--<ContentControl.ContentTemplate>
                        <DataTemplate DataType="{x:Type fa:ImageAwesome}">
                            <fa:ImageAwesome Icon="{Binding Icon}" Width="{Binding Width}" Height="{Binding Height}" Spin="{Binding Spin}"
                                             SpinDuration="{Binding SpinDuration}" Margin="{Binding Margin}" 
                                             Foreground="{Binding Path=Foreground, ElementName=iconContentControl}"/>
                        </DataTemplate>
                    </ContentControl.ContentTemplate>-->
                    <ContentControl.Resources>
                        <Style TargetType="{x:Type fa:ImageAwesome}">
                            <Setter Property="Foreground" Value="{Binding Path=IconFill, RelativeSource={RelativeSource AncestorType={x:Type controls:IconButton}}}"/>
                            <Style.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource iRLM.Button.DisabledForegroundBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="Path">
                            <Setter Property="Fill" Value="{Binding Path=IconFill, RelativeSource={RelativeSource AncestorType={x:Type controls:IconButton}}}"/>
                            <Setter Property="Stroke" Value="{Binding Path=IconStroke, RelativeSource={RelativeSource AncestorType={x:Type controls:IconButton}}}"/>
                            <Setter Property="StrokeThickness" Value="{Binding Path=IconStrokeThickness, RelativeSource={RelativeSource AncestorType={x:Type controls:IconButton}}}"/>
                            <Style.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Fill" Value="{DynamicResource iRLM.Button.DisabledForegroundBrush}"/>
                                    <Setter Property="Stroke" Value="Transparent"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ContentControl.Resources>
                </ContentControl>
                <Separator Margin="{TemplateBinding SeparatorMargin}" x:Name="separator">
                    <Separator.Template>
                        <ControlTemplate TargetType="{x:Type Separator}"/>
                    </Separator.Template>
                </Separator>
                <ContentPresenter x:Name="stringContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" 
                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IconContent" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="separator" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="separator" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsDefaulted" Value="True">
                <Setter Property="Background" Value="{DynamicResource iRLM.Button.BackgroundBrush}"/>
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource iRLM.Button.BorderBrush}"/>-->
                <Setter Property="Foreground" Value="{DynamicResource iRLM.Button.ForegroundBrush}"/>
                <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource iRLM.Button.HighlightBackgroundBrush}"/>
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource iRLM.Button.HighlightBorderBrush}"/>-->
                <Setter Property="Foreground" Value="{DynamicResource iRLM.Button.HighlightForegroundBrush}"/>
                <!--<Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource iRLM.Button.BorderThickness}"/>-->
                <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource iRLM.Button.PressedBackgroundBrush}"/>
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource iRLM.Button.PressedBorderBrush}"/>-->
                <Setter Property="Foreground" Value="{DynamicResource iRLM.Button.PressedForegroundBrush}"/>
                <!--<Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource iRLM.Button.PressedBorderThickness}"/>-->
                <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource iRLM.Button.CheckedBackgroundBrush}"/>
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource iRLM.Button.CheckedBorderBrush}"/>-->
                <Setter Property="Foreground" Value="{DynamicResource iRLM.Button.CheckedForegroundBrush}"/>
                <!--<Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource iRLM.Button.CheckedBorderThickness}"/>-->
                <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background" Value="{DynamicResource iRLM.Button.DisabledBackgroundBrush}"/>-->
                <!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource iRLM.Button.DisabledBorderBrush}"/>-->
                <Setter Property="Foreground" Value="{DynamicResource iRLM.Button.DisabledForegroundBrush}"/>
                <Setter Property="IconFill" Value="{DynamicResource iRLM.Button.DisabledForegroundBrush}"/>
                <!--<Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource iRLM.Button.DisabledBorderThickness}"/>-->
                <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Button}" x:Key="ButtonDefaultStye">
        <!--<Setter Property="Template" Value="{StaticResource ButtonDefaultTemplate}"/>-->
        <Setter Property="Background" Value="{StaticResource iRLM.Button.BackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource iRLM.Button.ForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource iRLM.Button.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource iRLM.Button.BorderThickness}"/>
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="5,4" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonDefaultStye}"/>

    <Style TargetType="{x:Type Button}" x:Key="IconButtonStyle" BasedOn="{StaticResource ButtonDefaultStye}">
        <!--<Setter Property="Template" Value="{StaticResource IconButtonTemplate}"/>-->
        <!--<Setter Property="BorderBrush" Value="Transparent"/>-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5,4"/>
    </Style>

    <Style TargetType="{x:Type controls:IconButton}" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Template" Value="{StaticResource IconButtonTemplate}"/>
    </Style>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeDashArray="1 2" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" Margin="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
    </LinearGradientBrush>-->
    <SolidColorBrush x:Key="ComboBox.Static.Background" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}">
                        <Border x:Name="splitBorder" Width="Auto" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
                            <!--<Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>-->
                            <fa:ImageAwesome x:Name="arrow" Icon="AngleDown" Margin="5" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Setter Property="TextBlock.FontWeight" Value="Bold"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>